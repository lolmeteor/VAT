#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ transcription_id –¥–ª—è —Ñ–∞–π–ª–∞
"""
import sys
import os
sys.path.append('/opt/vat')

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.config import settings
from app.models import Analysis, Transcription, AudioFile

def find_transcription_for_file():
    """–ù–∞—Ö–æ–¥–∏–º transcription_id –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("=== –ü–û–ò–°–ö TRANSCRIPTION_ID ===")
    
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(bind=engine)
    db = SessionLocal()
    
    try:
        # –§–∞–π–ª—ã –∏–∑ URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        file_ids = [
            'afb8e9bd-ff1f-4e46-90d9-fa5902a2d958',  # –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ URL
            '853e9aab-d63f-4aae-9b66-3fbdb8d1d701',  # –∏–∑ –ø–µ—Ä–≤–æ–≥–æ URL  
            '9d464a13-eda6-4654-be5e-78d1516e0f08',  # –∏–∑ –ª–æ–≥–æ–≤
            'd66d0cb3-902e-46fb-af6c-abfae7d4f7dc'   # –∏–∑ –ª–æ–≥–æ–≤
        ]
        
        for file_id in file_ids:
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: {file_id}")
            
            # –ò—â–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            audio_file = db.query(AudioFile).filter(AudioFile.file_id == file_id).first()
            if not audio_file:
                print("   ‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
                
            print(f"   ‚úÖ –§–∞–π–ª: {audio_file.original_file_name}")
            print(f"   üìÖ –°–æ–∑–¥–∞–Ω: {audio_file.created_at}")
            
            # –ò—â–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            transcription = db.query(Transcription).filter(Transcription.file_id == file_id).first()
            if not transcription:
                print("   ‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                continue
                
            print(f"   üìù Transcription ID: {transcription.transcription_id}")
            print(f"   üìä –°—Ç–∞—Ç—É—Å: {transcription.status}")
            
            # –ò—â–µ–º –∞–Ω–∞–ª–∏–∑—ã
            analyses = db.query(Analysis).filter(Analysis.transcription_id == transcription.transcription_id).all()
            print(f"   üîç –ê–Ω–∞–ª–∏–∑–æ–≤: {len(analyses)}")
            
            for analysis in analyses:
                print(f"      - {analysis.analysis_type.value}: {analysis.status.value}")
                print(f"        ID: {analysis.analysis_id}")
                if analysis.analysis_summary:
                    print(f"        –ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(analysis.analysis_summary)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º curl –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if transcription:
                print(f"\nüß™ –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥–∞:")
                print(f'curl -k -s "https://www.vertexassistant.ru/api/analyses/transcription/{transcription.transcription_id}" \\')
                print(f'  -H "Cookie: session_id=a58e4354-ee8b-470b-a0e1-166b0160502a" | jq \'.\'')
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    find_transcription_for_file()
