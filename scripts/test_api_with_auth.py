#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
"""
import sys
import os
sys.path.append('/opt/vat')

import requests
import json
from app.config import settings

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô ===")
    
    base_url = "https://www.vertexassistant.ru/api"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    public_endpoints = [
        "/health",
        "/",
        "/analyses/types/available",
        "/user/tariffs"
    ]
    
    print("üìã –ü—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    for endpoint in public_endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", verify=False, timeout=10)
            print(f"   ‚úÖ {endpoint}: {response.status_code}")
            if endpoint == "/analyses/types/available":
                data = response.json()
                if 'data' in data and 'types' in data['data']:
                    print(f"      –¢–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {len(data['data']['types'])}")
        except Exception as e:
            print(f"   ‚ùå {endpoint}: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    file_id = "06dd9e5d-df00-44d4-8fbd-6f7c23898de5"
    print(f"\nüìÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_id}:")
    
    try:
        response = requests.get(f"{base_url}/files/{file_id}", verify=False, timeout=10)
        print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"   –û—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_api_endpoints()
