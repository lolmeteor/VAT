#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã VAT
"""
import sys
import os
sys.path.append('/opt/vat')

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from app.config import settings
from app.models import User, AudioFile, Transcription, Analysis
import json
from datetime import datetime

def diagnose_database():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
    
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(bind=engine)
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        result = db.execute(text("SELECT 1")).fetchone()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: OK")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        tables = ['users', 'audio_files', 'transcriptions', 'analyses']
        for table in tables:
            count = db.execute(text(f"SELECT COUNT(*) FROM {table}")).scalar()
            print(f"üìä –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        print("\n=== –ü–û–°–õ–ï–î–ù–ò–ï –ê–£–î–ò–û–§–ê–ô–õ–´ ===")
        files = db.query(AudioFile).order_by(AudioFile.created_at.desc()).limit(5).all()
        for file in files:
            print(f"üéµ {file.file_id}: {file.original_file_name} - {file.status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            transcription = db.query(Transcription).filter(Transcription.file_id == file.file_id).first()
            if transcription:
                print(f"   üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {transcription.status}")
                print(f"   üìù ID: {transcription.transcription_id}")
                print(f"   üìù –¢–µ–∫—Å—Ç: {'–ï—Å—Ç—å' if transcription.transcription_text else '–ù–µ—Ç'}")
                print(f"   üìù S3 —Å—Å—ã–ª–∫–∞: {'–ï—Å—Ç—å' if transcription.s3_link_text else '–ù–µ—Ç'}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑—ã
                analyses = db.query(Analysis).filter(Analysis.transcription_id == transcription.transcription_id).all()
                print(f"   üîç –ê–Ω–∞–ª–∏–∑–æ–≤: {len(analyses)}")
                for analysis in analyses:
                    print(f"      - {analysis.analysis_type}: {analysis.status}")
                    if analysis.error_message:
                        print(f"        ‚ùå –û—à–∏–±–∫–∞: {analysis.error_message}")
            else:
                print("   ‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
    finally:
        db.close()

def diagnose_api_endpoints():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê API ===")
    
    import requests
    base_url = "https://www.vertexassistant.ru/api"
    
    endpoints = [
        "/health",
        "/",
        "/analyses/types/available",
        "/user/tariffs"
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", verify=False, timeout=10)
            print(f"‚úÖ {endpoint}: {response.status_code}")
        except Exception as e:
            print(f"‚ùå {endpoint}: {e}")

def diagnose_s3_connection():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê S3 ===")
    
    try:
        from app.services.s3 import S3Service
        s3_service = S3Service()
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        response = s3_service.client.list_objects_v2(
            Bucket=settings.s3_bucket_name,
            MaxKeys=5
        )
        
        print("‚úÖ S3 –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: OK")
        print(f"üìä –û–±—ä–µ–∫—Ç–æ–≤ –≤ –±–∞–∫–µ—Ç–µ: {response.get('KeyCount', 0)}")
        
        if 'Contents' in response:
            print("üìÅ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã:")
            for obj in response['Contents'][:3]:
                print(f"   - {obj['Key']} ({obj['Size']} –±–∞–π—Ç)")
                
    except Exception as e:
        print(f"‚ùå S3 –æ—à–∏–±–∫–∞: {e}")

def diagnose_make_webhooks():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Make.com –≤–µ–±—Ö—É–∫–æ–≤"""
    print("\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê MAKE.COM ===")
    
    print(f"üîó –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è webhook: {settings.make_transcription_webhook_url}")
    print(f"üîó –ê–Ω–∞–ª–∏–∑ webhooks: {len(settings.make_analysis_webhooks)} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    for analysis_type, webhook_url in settings.make_analysis_webhooks.items():
        print(f"   - {analysis_type}: {webhook_url[:50]}...")

def main():
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ VAT")
    print("=" * 50)
    
    diagnose_database()
    diagnose_api_endpoints()
    diagnose_s3_connection()
    diagnose_make_webhooks()
    
    print("\n" + "=" * 50)
    print("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    main()
