#!/usr/bin/env python3
"""
–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç Make.com –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import sys
import os
sys.path.append('/opt/vat')

import requests
import json
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.config import settings
from app.models import Analysis, ProcessingStatus

def simulate_analysis_completion():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞"""
    print("=== –°–ò–ú–£–õ–Ø–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ê–ù–ê–õ–ò–ó–ê ===")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(bind=engine)
    db = SessionLocal()
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ processing
        analysis = db.query(Analysis).filter(
            Analysis.status == ProcessingStatus.processing
        ).first()
        
        if not analysis:
            print("‚ùå –ù–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ 'processing'")
            return
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∞–Ω–∞–ª–∏–∑: {analysis.analysis_id}")
        print(f"üìä –¢–∏–ø: {analysis.analysis_type}")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ò–ò
        fake_analysis_result = {
            "analysis_text": f"""
–ê–ù–ê–õ–ò–ó –¢–ò–ü–ê: {analysis.analysis_type.value.upper()}

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–æ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏.

–û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:
1. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
2. –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
3. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
- –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ webhook'–æ–≤

–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis.created_at}
–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analysis.analysis_type.value}
            """.strip(),
            
            "analysis_summary": f"–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ '{analysis.analysis_type.value}' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
            
            "key_points": [
                "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ",
                "–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º", 
                "–°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
                f"–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞: {analysis.analysis_type.value}"
            ]
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –ë–î (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–ª –±—ã Make.com)
        analysis.analysis_text = fake_analysis_result["analysis_text"]
        analysis.analysis_summary = fake_analysis_result["analysis_summary"]
        analysis.key_points = fake_analysis_result["key_points"]
        analysis.status = ProcessingStatus.completed
        
        db.commit()
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–ª –±—ã Make.com)
        webhook_data = {
            "analysis_id": analysis.analysis_id,
            "status": "completed"
        }
        
        response = requests.post(
            "https://www.vertexassistant.ru/api/webhooks/analysis/completed",
            json=webhook_data,
            verify=False,
            timeout=10
        )
        
        print(f"üì° Webhook –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {response.status_code}")
        print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
        
        print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ {analysis.analysis_id} –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    simulate_analysis_completion()
