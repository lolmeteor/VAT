#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –ë–î
"""
import sys
import os
sys.path.append('/opt/vat')

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.config import settings
from app.models import Analysis, Transcription, AudioFile, AnalysisType, ProcessingStatus
import uuid

def test_create_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î"""
    print("=== –¢–ï–°–¢ –°–û–ó–î–ê–ù–ò–Ø –ê–ù–ê–õ–ò–ó–ê ===")
    
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(bind=engine)
    db = SessionLocal()
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        transcription = db.query(Transcription).filter(
            Transcription.status == ProcessingStatus.completed
        ).first()
        
        if not transcription:
            print("‚ùå –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: {transcription.transcription_id}")
        print(f"üìù –°—Ç–∞—Ç—É—Å: {transcription.status}")
        print(f"üìù –ï—Å—Ç—å —Ç–µ–∫—Å—Ç: {'–î–∞' if transcription.transcription_text else '–ù–µ—Ç'}")
        print(f"üìù S3 —Å—Å—ã–ª–∫–∞: {'–î–∞' if transcription.s3_link_text else '–ù–µ—Ç'}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        analysis = Analysis(
            analysis_id=str(uuid.uuid4()),
            transcription_id=transcription.transcription_id,
            analysis_type=AnalysisType.kp,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º lowercase
            status=ProcessingStatus.pending
        )
        
        db.add(analysis)
        db.commit()
        db.refresh(analysis)
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω: {analysis.analysis_id}")
        print(f"üìä –¢–∏–ø: {analysis.analysis_type}")
        print(f"üìä –°—Ç–∞—Ç—É—Å: {analysis.status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        saved_analysis = db.query(Analysis).filter(
            Analysis.analysis_id == analysis.analysis_id
        ).first()
        
        if saved_analysis:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    test_create_analysis()
