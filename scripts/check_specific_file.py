#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
"""
import sys
import os
sys.path.append('/opt/vat')

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.config import settings
from app.models import Analysis, Transcription, AudioFile, User

def check_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("=== –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê 06dd9e5d-df00-44d4-8fbd-6f7c23898de5 ===")
    
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(bind=engine)
    db = SessionLocal()
    
    try:
        file_id = '06dd9e5d-df00-44d4-8fbd-6f7c23898de5'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
        audio_file = db.query(AudioFile).filter(AudioFile.file_id == file_id).first()
        if audio_file:
            print(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω:")
            print(f"   File ID: {audio_file.file_id}")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {audio_file.original_file_name}")
            print(f"   User ID: {audio_file.user_id}")
            print(f"   –°—Ç–∞—Ç—É—Å: {audio_file.status}")
            print(f"   –°–æ–∑–¥–∞–Ω: {audio_file.created_at}")
        else:
            print("‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        transcription = db.query(Transcription).filter(Transcription.file_id == file_id).first()
        if transcription:
            print(f"\n‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞:")
            print(f"   Transcription ID: {transcription.transcription_id}")
            print(f"   –°—Ç–∞—Ç—É—Å: {transcription.status}")
            print(f"   –ï—Å—Ç—å —Ç–µ–∫—Å—Ç: {'–î–∞' if transcription.transcription_text else '–ù–µ—Ç'}")
            print(f"   S3 —Å—Å—ã–ª–∫–∞: {'–î–∞' if transcription.s3_link_text else '–ù–µ—Ç'}")
            print(f"   –°–æ–∑–¥–∞–Ω–∞: {transcription.created_at}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑—ã
            analyses = db.query(Analysis).filter(Analysis.transcription_id == transcription.transcription_id).all()
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {len(analyses)}")
            
            for analysis in analyses:
                print(f"   - {analysis.analysis_type}: {analysis.status} ({analysis.created_at})")
                if analysis.analysis_text:
                    print(f"     –ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(analysis.analysis_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—Ç")
        else:
            print("\n‚ùå –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("–°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            import uuid
            from app.models import ProcessingStatus
            
            transcription = Transcription(
                transcription_id=str(uuid.uuid4()),
                file_id=file_id,
                status=ProcessingStatus.pending
            )
            
            db.add(transcription)
            db.commit()
            db.refresh(transcription)
            
            print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {transcription.transcription_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    check_file()
