#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –ë–î
"""
import sys
import os
sys.path.append('/opt/vat')

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from app.config import settings
from app.models import Analysis, Transcription, AudioFile, User
from datetime import datetime, timedelta
import json

def diagnose_analyses_data():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤"""
    print("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ê–ù–ù–´–• –ê–ù–ê–õ–ò–ó–û–í ===")
    
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(bind=engine)
    db = SessionLocal()
    
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_analyses = db.query(Analysis).count()
        print(f"üìä –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –ë–î: {total_analyses}")
        
        # –ê–Ω–∞–ª–∏–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        print("\nüìà –ê–Ω–∞–ª–∏–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        statuses = db.execute(text("""
            SELECT status, COUNT(*) as count 
            FROM analyses 
            GROUP BY status 
            ORDER BY count DESC
        """)).fetchall()
        
        for status, count in statuses:
            print(f"   {status}: {count}")
        
        # –ê–Ω–∞–ª–∏–∑—ã –ø–æ —Ç–∏–ø–∞–º
        print("\nüìã –ê–Ω–∞–ª–∏–∑—ã –ø–æ —Ç–∏–ø–∞–º:")
        types = db.execute(text("""
            SELECT analysis_type, COUNT(*) as count 
            FROM analyses 
            GROUP BY analysis_type 
            ORDER BY count DESC
        """)).fetchall()
        
        for analysis_type, count in types:
            print(f"   {analysis_type}: {count}")
        
        # –ê–Ω–∞–ª–∏–∑—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
        print("\n‚è∞ –ê–Ω–∞–ª–∏–∑—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏:")
        now = datetime.utcnow()
        
        time_ranges = [
            ("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç", 5),
            ("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –º–∏–Ω—É—Ç", 30),
            ("–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å", 60),
            ("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞", 24 * 60),
            ("–°—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤", None)
        ]
        
        for label, minutes in time_ranges:
            if minutes:
                cutoff = now - timedelta(minutes=minutes)
                count = db.query(Analysis).filter(Analysis.created_at >= cutoff).count()
            else:
                cutoff = now - timedelta(hours=24)
                count = db.query(Analysis).filter(Analysis.created_at < cutoff).count()
            
            print(f"   {label}: {count}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Ñ–∞–π–ª–∞–º
        print("\nüìÅ –ê–Ω–∞–ª–∏–∑—ã –ø–æ —Ñ–∞–π–ª–∞–º (—Ç–æ–ø 10):")
        file_analyses = db.execute(text("""
            SELECT 
                af.file_id,
                af.original_file_name,
                af.user_id,
                COUNT(a.analysis_id) as analyses_count,
                MIN(a.created_at) as first_analysis,
                MAX(a.created_at) as last_analysis
            FROM audio_files af
            LEFT JOIN transcriptions t ON af.file_id = t.file_id
            LEFT JOIN analyses a ON t.transcription_id = a.transcription_id
            WHERE a.analysis_id IS NOT NULL
            GROUP BY af.file_id, af.original_file_name, af.user_id
            ORDER BY analyses_count DESC
            LIMIT 10
        """)).fetchall()
        
        for row in file_analyses:
            file_id, filename, user_id, count, first, last = row
            print(f"   üìÑ {filename[:30]}...")
            print(f"      File ID: {file_id}")
            print(f"      User ID: {user_id}")
            print(f"      –ê–Ω–∞–ª–∏–∑–æ–≤: {count}")
            print(f"      –ü–µ—Ä–≤—ã–π: {first}")
            print(f"      –ü–æ—Å–ª–µ–¥–Ω–∏–π: {last}")
            print()
        
        # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
        print("üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤:")
        duplicates = db.execute(text("""
            SELECT 
                transcription_id,
                analysis_type,
                COUNT(*) as count
            FROM analyses
            GROUP BY transcription_id, analysis_type
            HAVING COUNT(*) > 1
            ORDER BY count DESC
        """)).fetchall()
        
        if duplicates:
            print(f"   –ù–∞–π–¥–µ–Ω–æ {len(duplicates)} –≥—Ä—É–ø–ø –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤:")
            for transcription_id, analysis_type, count in duplicates[:10]:
                print(f"   - {analysis_type} –¥–ª—è {transcription_id}: {count} –¥—É–±–ª–µ–π")
        else:
            print("   ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ê–Ω–∞–ª–∏–∑—ã –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n‚ùå –ê–Ω–∞–ª–∏–∑—ã –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        empty_analyses = db.query(Analysis).filter(
            Analysis.analysis_text.is_(None),
            Analysis.analysis_summary.is_(None),
            Analysis.key_points.is_(None)
        ).count()
        print(f"   –ê–Ω–∞–ª–∏–∑–æ–≤ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: {empty_analyses}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    diagnose_analyses_data()
