#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –∞–Ω–∞–ª–∏–∑–æ–≤
"""
import sys
import os
sys.path.append('/opt/vat')

import requests
import json
from app.config import settings

def test_analyses_endpoint():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/analyses/start"""
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ù–î–ü–û–ò–ù–¢–ê –ê–ù–ê–õ–ò–ó–û–í ===")
    
    base_url = "https://www.vertexassistant.ru/api"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        "transcription_id": "test-transcription-id",
        "analysis_types": ["kp", "first_meeting"]
    }
    
    print(f"üîó URL: {base_url}/analyses/start")
    print(f"üìù –î–∞–Ω–Ω—ã–µ: {json.dumps(test_data, indent=2)}")
    
    try:
        response = requests.post(
            f"{base_url}/analyses/start",
            json=test_data,
            verify=False,
            timeout=10
        )
        
        print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status_code}")
        print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
        
        if response.headers.get('content-type', '').startswith('application/json'):
            try:
                json_response = response.json()
                print(f"üìã JSON: {json.dumps(json_response, indent=2, ensure_ascii=False)}")
            except:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

def check_router_registration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –†–û–£–¢–ï–†–û–í ===")
    
    try:
        from main import app
        
        print("üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ—É—Ç—ã:")
        for route in app.routes:
            if hasattr(route, 'path') and hasattr(route, 'methods'):
                if '/analyses' in route.path:
                    print(f"   ‚úÖ {route.methods} {route.path}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤: {e}")

if __name__ == "__main__":
    test_analyses_endpoint()
    check_router_registration()
