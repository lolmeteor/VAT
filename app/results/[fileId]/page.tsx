"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Loader2, Download, FileText, RefreshCw } from "lucide-react"
import WithHeaderLayout from "@/app/with-header-layout"

interface Analysis {
  analysis_id: string
  analysis_type: string
  status: string
  s3_docx_link?: string
  s3_pdf_link?: string
  analysis_summary?: string
  key_points?: any[]
  error_message?: string
  created_at: string
  updated_at: string
}

interface FileInfo {
  file_id: string
  original_file_name: string
  duration_seconds?: number
  status: string
  created_at: string
}

interface Transcription {
  transcription_id: string
  transcription_text?: string
  speakers_count?: number
  language_detected?: string
  status: string
  s3_link_text?: string
}

function ResultsContent({ params }: { params: { fileId: string } }) {
  const [fileInfo, setFileInfo] = useState<FileInfo | null>(null)
  const [transcription, setTranscription] = useState<Transcription | null>(null)
  const [analyses, setAnalyses] = useState<Analysis[]>([])
  const [loading, setLoading] = useState(true)
  const [refreshing, setRefreshing] = useState(false)

  const fetchData = async () => {
    try {
      console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∞–π–ª–∞:", params.fileId)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
      const fileResponse = await fetch(`/api/files/${params.fileId}`, {
        credentials: "include",
      })

      console.log("üìÅ –û—Ç–≤–µ—Ç —Ñ–∞–π–ª–∞:", fileResponse.status, fileResponse.statusText)
      if (fileResponse.ok) {
        const fileData = await fileResponse.json()
        console.log("üìÅ –î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞:", fileData)
        setFileInfo(fileData)
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:", await fileResponse.text())
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
      console.log("üìù –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é...")
      const transcriptionResponse = await fetch(`/api/files/${params.fileId}/transcription`, {
        credentials: "include",
      })

      console.log("üìù –û—Ç–≤–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:", transcriptionResponse.status, transcriptionResponse.statusText)
      if (transcriptionResponse.ok) {
        const transcriptionData = await transcriptionResponse.json()
        console.log("üìù –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:", transcriptionData)
        setTranscription(transcriptionData)

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–ï –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è —ç—Ç–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        console.log("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è transcription_id:", transcriptionData.transcription_id)
        const analysesResponse = await fetch(`/api/analyses/transcription/${transcriptionData.transcription_id}`, {
          credentials: "include",
        })

        console.log("üîç –û—Ç–≤–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤:", analysesResponse.status, analysesResponse.statusText)
        if (analysesResponse.ok) {
          const analysesData = await analysesResponse.json()
          console.log("üîç –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–æ–≤:", analysesData)
          setAnalyses(analysesData || [])
        } else {
          const errorText = await analysesResponse.text()
          console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤:", analysesResponse.status, errorText)
          setAnalyses([])
        }
      } else {
        const errorText = await transcriptionResponse.text()
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:", transcriptionResponse.status, errorText)
        console.log("‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
      }
    } catch (error) {
      console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error)
    } finally {
      setLoading(false)
      setRefreshing(false)
    }
  }

  useEffect(() => {
    fetchData()
  }, [params.fileId])

  const handleRefresh = () => {
    setRefreshing(true)
    fetchData()
  }

  const getStatusBadge = (status: string) => {
    const statusMap = {
      pending: { label: "–û–∂–∏–¥–∞–µ—Ç", variant: "secondary" as const },
      processing: { label: "–û–±—Ä–∞–±–æ—Ç–∫–∞", variant: "default" as const },
      completed: { label: "–ì–æ—Ç–æ–≤–æ", variant: "default" as const },
      failed: { label: "–û—à–∏–±–∫–∞", variant: "destructive" as const },
    }
    return statusMap[status as keyof typeof statusMap] || { label: status, variant: "secondary" as const }
  }

  const getAnalysisTypeName = (type: string) => {
    const typeMap: { [key: string]: string } = {
      kp: "–ö–ª—é—á–µ–≤—ã–µ –ø—É–Ω–∫—Ç—ã",
      first_meeting: "–ü–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞",
      follow_up_meeting: "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞",
      protocol: "–ü—Ä–æ—Ç–æ–∫–æ–ª –≤—Å—Ç—Ä–µ—á–∏",
      speaker1_psycho: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —Å–ø–∏–∫–µ—Ä–∞ 1",
      speaker1_negative: "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —Å–ø–∏–∫–µ—Ä–∞ 1",
      speaker2_psycho: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —Å–ø–∏–∫–µ—Ä–∞ 2",
      speaker2_negative: "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —Å–ø–∏–∫–µ—Ä–∞ 2",
      speaker3_psycho: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —Å–ø–∏–∫–µ—Ä–∞ 3",
      speaker3_negative: "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —Å–ø–∏–∫–µ—Ä–∞ 3",
      speaker4_psycho: "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —Å–ø–∏–∫–µ—Ä–∞ 4",
      speaker4_negative: "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —Å–ø–∏–∫–µ—Ä–∞ 4",
    }
    return typeMap[type] || type
  }

  if (loading) {
    return (
      <div className="container mx-auto py-8">
        <div className="flex items-center justify-center">
          <Loader2 className="h-8 w-8 animate-spin" />
          <span className="ml-2">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...</span>
        </div>
      </div>
    )
  }

  return (
    <div className="container mx-auto py-8 px-4">
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-3xl font-bold mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</h1>
          <p className="text-muted-foreground">{fileInfo?.original_file_name || `–§–∞–π–ª ${params.fileId}`}</p>
        </div>
        <Button onClick={handleRefresh} disabled={refreshing} variant="outline">
          <RefreshCw className={`mr-2 h-4 w-4 ${refreshing ? "animate-spin" : ""}`} />
          –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </div>

      <Tabs defaultValue="analyses" className="space-y-6">
        <TabsList>
          <TabsTrigger value="analyses">–ê–Ω–∞–ª–∏–∑—ã</TabsTrigger>
          <TabsTrigger value="transcription">–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</TabsTrigger>
          <TabsTrigger value="file-info">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ</TabsTrigger>
        </TabsList>

        <TabsContent value="analyses">
          <div className="space-y-4">
            {analyses.length === 0 ? (
              <Card>
                <CardContent className="text-center py-8">
                  <p className="text-muted-foreground">–ê–Ω–∞–ª–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                  <Button className="mt-4" onClick={() => (window.location.href = `/analysis/${params.fileId}`)}>
                    –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑
                  </Button>
                </CardContent>
              </Card>
            ) : (
              analyses.map((analysis) => (
                <Card key={analysis.analysis_id}>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="text-lg">{getAnalysisTypeName(analysis.analysis_type)}</CardTitle>
                      <Badge variant={getStatusBadge(analysis.status).variant}>
                        {getStatusBadge(analysis.status).label}
                      </Badge>
                    </div>
                    <CardDescription>
                      –°–æ–∑–¥–∞–Ω: {new Date(analysis.created_at).toLocaleString("ru-RU")}
                      {analysis.updated_at !== analysis.created_at && (
                        <> ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω: {new Date(analysis.updated_at).toLocaleString("ru-RU")}</>
                      )}
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {analysis.status === "failed" && analysis.error_message && (
                      <div className="p-4 bg-destructive/10 border border-destructive/20 rounded-lg">
                        <p className="text-sm text-destructive">{analysis.error_message}</p>
                      </div>
                    )}

                    {analysis.analysis_summary && (
                      <div>
                        <h4 className="font-medium mb-2">–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</h4>
                        <p className="text-sm text-muted-foreground">{analysis.analysis_summary}</p>
                      </div>
                    )}

                    {analysis.key_points && analysis.key_points.length > 0 && (
                      <div>
                        <h4 className="font-medium mb-2">–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:</h4>
                        <ul className="list-disc list-inside space-y-1">
                          {analysis.key_points.map((point, index) => (
                            <li key={index} className="text-sm text-muted-foreground">
                              {typeof point === "string" ? point : JSON.stringify(point)}
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {analysis.status === "completed" && (
                      <div className="flex space-x-2">
                        <Button size="sm" variant="outline" asChild>
                          <a
                            href={`/api/analyses/${analysis.analysis_id}/download/docx`}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            <Download className="mr-2 h-4 w-4" />
                            DOCX
                          </a>
                        </Button>
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))
            )}
          </div>
        </TabsContent>

        <TabsContent value="transcription">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è</span>
                {transcription && (
                  <Badge variant={getStatusBadge(transcription.status).variant}>
                    {getStatusBadge(transcription.status).label}
                  </Badge>
                )}
              </CardTitle>
              {transcription && (
                <CardDescription>
                  {transcription.speakers_count && <>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–∫–µ—Ä–æ–≤: {transcription.speakers_count} ‚Ä¢ </>}
                  {transcription.language_detected && <>–Ø–∑—ã–∫: {transcription.language_detected}</>}
                </CardDescription>
              )}
            </CardHeader>
            <CardContent>
              {transcription?.transcription_text ? (
                <div className="space-y-4">
                  <div className="p-4 bg-muted rounded-lg">
                    <pre className="whitespace-pre-wrap text-sm">{transcription.transcription_text}</pre>
                  </div>
                  <div className="flex space-x-2">
                    <Button variant="outline" asChild>
                      <a
                        href={`/api/files/${params.fileId}/transcription/download/txt`}
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        <FileText className="mr-2 h-4 w-4" />
                        TXT
                      </a>
                    </Button>
                    <Button variant="outline" asChild>
                      <a
                        href={`/api/files/${params.fileId}/transcription/download/docx`}
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        <Download className="mr-2 h-4 w-4" />
                        DOCX
                      </a>
                    </Button>
                  </div>
                </div>
              ) : (
                <p className="text-muted-foreground">
                  {transcription?.status === "pending" || transcription?.status === "processing"
                    ? "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏..."
                    : "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
                </p>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="file-info">
          <Card>
            <CardHeader>
              <CardTitle>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ</CardTitle>
            </CardHeader>
            <CardContent>
              {fileInfo && (
                <div className="space-y-4">
                  <div>
                    <p className="text-sm text-muted-foreground">–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞</p>
                    <p className="font-medium">{fileInfo.original_file_name}</p>
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">–°—Ç–∞—Ç—É—Å</p>
                    <Badge variant={getStatusBadge(fileInfo.status).variant}>
                      {getStatusBadge(fileInfo.status).label}
                    </Badge>
                  </div>
                  {fileInfo.duration_seconds && (
                    <div>
                      <p className="text-sm text-muted-foreground">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</p>
                      <p className="font-medium">
                        {Math.floor(fileInfo.duration_seconds / 60)}:
                        {(fileInfo.duration_seconds % 60).toString().padStart(2, "0")}
                      </p>
                    </div>
                  )}
                  <div>
                    <p className="text-sm text-muted-foreground">–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>
                    <p className="font-medium">{new Date(fileInfo.created_at).toLocaleString("ru-RU")}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}

export default function ResultsPage({ params }: { params: { fileId: string } }) {
  return (
    <WithHeaderLayout>
      <ResultsContent params={params} />
    </WithHeaderLayout>
  )
}
