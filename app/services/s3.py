"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å S3-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
"""
import boto3
from botocore.exceptions import ClientError
import logging
import uuid
from typing import Optional, Tuple
from app.config import settings

logger = logging.getLogger(__name__)

class S3Service:
    def __init__(self):
        self.client = boto3.client(
            's3',
            endpoint_url=settings.s3_endpoint_url,
            aws_access_key_id=settings.s3_access_key_id,  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            aws_secret_access_key=settings.s3_secret_access_key,
            region_name=settings.s3_region
        )
        self.bucket_name = settings.s3_bucket_name

    def upload_audio_file(self, file_content: bytes, original_filename: str, user_id: str) -> Tuple[str, str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ S3 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç file_id –∏ URL
        """
        try:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞: {original_filename} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}")
            logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(file_content)} –±–∞–π—Ç")
            logger.info(f"üîß S3 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: endpoint={settings.s3_endpoint_url}, bucket={settings.s3_bucket_name}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π file_id
            file_id = str(uuid.uuid4())
            logger.info(f"üÜî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω file_id: {file_id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_extension = original_filename.split('.')[-1].lower() if '.' in original_filename else 'mp3'
            logger.info(f"üìÅ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_extension}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á —Ñ–∞–π–ª–∞ –≤ S3
            file_key = f"audio/{user_id}/{file_id}.{file_extension}"
            logger.info(f"üîë S3 –∫–ª—é—á —Ñ–∞–π–ª–∞: {file_key}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content type
            content_type_map = {
                'mp3': 'audio/mpeg',
                'wav': 'audio/wav',
                'm4a': 'audio/mp4',
                'flac': 'audio/flac',
                'ogg': 'audio/ogg'
            }
            content_type = content_type_map.get(file_extension, 'audio/mpeg')
            logger.info(f"üìÑ Content-Type: {content_type}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            logger.info("‚¨ÜÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ S3...")
            self.client.put_object(
                Bucket=self.bucket_name,
                Key=file_key,
                Body=file_content,
                ContentType=content_type,
                Metadata={
                    'original_filename': original_filename,
                    'user_id': user_id,
                    'file_id': file_id
                }
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ñ–∞–π–ª–∞
            file_url = f"{settings.s3_endpoint_url}/{self.bucket_name}/{file_key}"
            logger.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {file_url}")
            
            return file_id, file_url
            
        except ClientError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ S3 ClientError: {e}")
            logger.error(f"‚ùå Error code: {e.response.get('Error', {}).get('Code', 'Unknown')}")
            logger.error(f"‚ùå Error message: {e.response.get('Error', {}).get('Message', 'Unknown')}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ S3: {str(e)}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ S3: {e}")
            raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    def upload_text_file(self, text_content: str, file_key: str) -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ S3
        """
        try:
            self.client.put_object(
                Bucket=self.bucket_name,
                Key=file_key,
                Body=text_content.encode('utf-8'),
                ContentType='text/plain; charset=utf-8'
            )
            
            file_url = f"{settings.s3_endpoint_url}/{self.bucket_name}/{file_key}"
            logger.info(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {file_url}")
            return file_url
            
        except ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ S3: {e}")
            return None

    def upload_document(self, document_content: bytes, file_key: str, content_type: str) -> Optional[str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç (DOCX, PDF) –≤ S3
        """
        try:
            self.client.put_object(
                Bucket=self.bucket_name,
                Key=file_key,
                Body=document_content,
                ContentType=content_type
            )
            
            file_url = f"{settings.s3_endpoint_url}/{self.bucket_name}/{file_key}"
            logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {file_url}")
            return file_url
            
        except ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ S3: {e}")
            return None

    def delete_file(self, file_key: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –∏–∑ S3
        """
        try:
            self.client.delete_object(Bucket=self.bucket_name, Key=file_key)
            logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω: {file_key}")
            return True
            
        except ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ S3: {e}")
            return False

    def get_presigned_url(self, file_key: str, expires_in: int = 3600) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
        """
        try:
            url = self.client.generate_presigned_url(
                'get_object',
                Params={'Bucket': self.bucket_name, 'Key': file_key},
                ExpiresIn=expires_in
            )
            return url
            
        except ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL –¥–ª—è —Ñ–∞–π–ª–∞: {e}")
            return None
